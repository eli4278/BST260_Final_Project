---
title: "BST260 Final Project"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Excess Mortality Prediction

Load Packages

```{r, message=FALSE}
library(devtools) 
library(excessmort)
library(tidyverse)
library(conflicted)

conflicts_prefer(dplyr::filter)
```

## Question 1

```{r}
puerto_rico_counts |>    
  ggplot(aes(date, population, color = agegroup)) +     
  geom_line() +      
  facet_wrap('~sex') +     
  labs(title = "Population Sizes by Age Group and Gender in Puerto Rico", 
       x = "Age Group", y = "Total Population", fill = "Sex") +     
  theme_minimal() +     
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

As seen from the plot, the population sizes for the younger age groups have increased over time, while those for the older age groups have decreased. There does not appear to be any significant differences in population size between males and females overtime. Both males and females followed the same general trend for each age group.

## Question 2

Divide the data into weeks

```{r}
weekly_counts <- puerto_rico_counts |>    
  mutate(date = as.Date(date),
         date = floor_date(date, week_start = 3, unit = "week"))  

weekly_counts <- weekly_counts |>    
  group_by(date, sex, agegroup) |>    
  summarise(outcome = sum(outcome), 
            population = mean(population), 
            n = n(), .groups = 'drop') |>    
  filter(n == 7) |>    
  select(-n) |>    
  mutate(week = epiweek(date))  

# look at weekly death counts for 2017
weekly_counts |> 
  filter(year(date) == 2017) |> 
  ggplot(aes(date,outcome)) + geom_line() + facet_grid(sex~agegroup)
```

The death counts for the older age groups are higher.

```{r}
# Estimate expected mortality and standard deviation by week, age group, and sex
expected_mortality <- data_2017 %>%
  group_by(agegroup, sex) %>%
  summarize(
    avg = mean(outcome, na.rm = TRUE),
    sd = sd(outcome, na.rm = TRUE),
    lower = avg - 1.96*sd,
    upper = avg + 1.96*sd
  )

# Visualize expected mortality
ggplot(expected_mortality, aes(avg, color = agegroup)) +
  geom_point() +
  facet_wrap(~sex) +
  geom_ribbon() +
  labs(title = "Expected Weekly Mortality by Age Group and Sex (Pre-2017)",
       x = "Week", y = "Expected Deaths") +
  theme_minimal()

ggplot(expected_mortality, aes(x = agegroup, y = avg, color = sex)) +
  geom_pointrange(aes(ymin = lower, ymax = upper), position = position_dodge(width = 0.5)) +
  labs(
    title = "Mean Deaths by Agegroup with 95% Confidence Intervals",
    x = "Age Group",
    y = "Mean Deaths",
    color = "Sex"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Fit a zero-inflated Poisson regression model to the weekly data that accounts for:

-   Age effect.
-   A sex effect.
-   Week of year (1-52).

Use death count as the outcome in the model.

```{r}
# fit model based on death counts from before 2017, use population as offset, zero-inflate model
library(pscl)

training <- weekly_counts |> filter(year(date) < 2017)

zip_model <- zeroinfl(outcome ~ week + agegroup + sex + offset(log(population)) | week + agegroup + sex, data = training, dist = "poisson")
summary(zip_model)
```

Check for over dispersion:

```{r}
# Calculate Pearson residuals
pearson_residuals <- residuals(zip_model, type = "pearson")

# Check if the sum of squared Pearson residuals is much larger than the degrees of freedom
sum(pearson_residuals^2) / df.residual(zip_model)
```

The model is not significantly over-dispersed, so we should be okay to proceed.

Apply this model to the 2017 data to predict death counts and standard deviations.

```{r}
data_2017 <- weekly_counts |>    
  filter(year(date) == 2017)

pred_2017 <- predict(zip_model, data_2017, se.fit = T)
```

Create confidence intervals for each week of 2017 and compare with actual counts:

```{r}
data_2017 <- cbind(data_2017, pred_2017)

library(boot)

bootstrap_predict <- function(data, indices) {
  # Resample data
  boot_data <- data[indices, ]
  
  # Refit model
  boot_model <- zeroinfl(count ~ x1 + x2 | x1 + x2, data = boot_data, dist = "poisson")
  
  # Predict for specific newdata
  new_data <- data.frame(x1 = 0, x2 = 1) # Adjust newdata as needed
  predict(boot_model, newdata = new_data, type = "response")
}

# Perform bootstrapping
set.seed(123)
boot_res <- boot(data, statistic = bootstrap_predict, R = 10)

# extract confidence intervals, apply to predictions for 2017
CI <- setNames(as.data.frame(t(sapply(1:nrow(data_2017), function(row)
+     boot.ci(boot_res, conf = 0.95, type = "basic", index = row)$basic[, 4:5]))),
+     c("lower", "upper"))

data_2017 <- cbind(data_2017, CI)

ggplot(data_2017, aes(x = week, y = outcome, color = sex)) +   
  geom_line() +
  geom_line(aes(x=week, y=pred_2017, color=sex, linetype = "Predicted")) +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
  facet_wrap("~agegroup") +
  labs(title = "Weekly Death Counts: 2017",        
       x = "Week",        
       y = "Death Count",        
       color = "Year") +   
  scale_linetype_manual(values = c("solid", "dashed")) +
  theme_minimal() +   
  theme(axis.text.x = element_text(angle = 90))

# individual plots
# Split data by age group
data_split <- split(data_2017, data_2017$agegroup)

# Generate individual plots
plots <- lapply(names(data_split), function(agegroup) {
  ggplot(data_split[[agegroup]], aes(x = week, y = outcome, color = sex)) +   
    geom_line() +
    geom_line(aes(x = week, y = pred_2017, color = sex, linetype = "Predicted")) +
    geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
    labs(
      title = paste("Weekly Death Counts: 2017 - Age Group:", agegroup),        
      x = "Week",        
      y = "Death Count",        
      color = "Sex"
    ) +   
    scale_linetype_manual(values = c("solid", "dashed")) +
    theme_minimal() +   
    theme(axis.text.x = element_text(angle = 90))
})
```

## Question 3

```{r}
training |> 
  ggplot(aes(x=date, y=outcome, color=sex)) + 
  geom_line() +
  facet_wrap("~agegroup")
```

Now obtain expected counts for the entire dataset, including 2017. Compute the difference between the observed count and expected count and plot the total excess death for each week. Construct a confidence interval for the excess mortality estimate for each week. Hint: use the `predict` function.

```{r}
dat2 <- weekly_counts |>    
  mutate(rate = outcome/population,          
         day = difftime(date, min(date), units = "day"),          
         week = as.factor(week)) |>    
  filter(year(date) == 2017)  

# Predict expected counts for the entire dataset including 2017 
predictions <- predict(fit, newdata = dat2, se.fit = T)  

# Var(Y-Y_hat) = Var(Y) + Var(Y_hat) = variance of residuals + variance of predictions total_2017 <- dat2 |>    group_by(date) |>    summarise(excess = sum(excess_deaths),              se = sqrt(sum(sigma^2 + se^2)),             lower_CI = excess - 1.96*se,             upper_CI = excess + 1.96*se)  # Plot total excess deaths with confidence intervals ggplot(total_2017, aes(x = date, y = excess)) +   geom_line() +   geom_point(color = "red") +   geom_hline(yintercept = 0) +   geom_ribbon(aes(ymin = lower_CI, ymax = upper_CI), alpha = 0.2) +   labs(title = "Total Excess Deaths for Each Week in 2017",        x = "Week",        y = "Excess Deaths") +   theme_minimal()
```

## Question 4

Determine what day of the week María made landfall in PR (September 20, 2017).

```{r}
maria <- make_date(2017, 9, 20) 
day_of_week <- wday(maria, label = TRUE, abbr = FALSE)  
day_of_week
```

**Hurricane Maria made landfall on a Wednesday.**

Redefine the date column to be the start of the week that date is part of: in other words, round the date down to the nearest week. Use the day of the week María made landfall as the first day. So, for example, 2017-09-20, 2017-09-21, 2017-09-22 should all be rounded down to 2017-09-20, while 2017-09-19 should be rounded down to 2017-09-13. Save the resulting table in `weekly_counts`.

```{r}
weekly_counts <- counts |> mutate(date = floor_date(date, week_start = 3, unit = "week"))  
head(weekly_counts) 
```

Now collapse the `weekly_count` data frame to store only one mortality value for each week, for each `sex` and `agegroup`. To this by by redefining `outcome` to have the total deaths that week for each `sex` and `agegroup`. Remove weeks that have less the 7 days of data. Finally, add a column with the MMWR week. Name the resulting data frame `weekly_counts`.

```{r}
weekly_counts <- weekly_counts |>    
  group_by(date, sex, agegroup) |>    
  summarise(outcome = sum(outcome), 
            population = mean(population), 
            n = n(), .groups = 'drop') |>    
  filter(n == 7) |>    select(-n) |>    
  mutate(week = epiweek(date))  

# weekly_counts |> ggplot(aes(date,outcome)) + geom_line() + facet_grid(agegroup~sex)  head(weekly_counts) dim(weekly_counts)}`
```

Comparing mortality totals is often unfair because the two groups begin compared have different population sizes. It is particularly important we consider rates rather than totals in this dataset because the demographics in Puerto Rico changed dramatically in the last 20 years. To see this use `puerto_rico_counts` to plot the population sizes by age group and gender. Provide a two sentence description of what you see.

Make a boxplot for each MMWR week's mortality rate based on the 2002-2016 data. Each week has 15 data points, one for each year. Then add the 2017 data as red points.

```{r}
# Split data into 2002-2016 and 2017  
data_2002_2016 <- weekly_counts |>    
  filter(year(date) >= 2002 & year(date) <= 2016) |>    
  group_by(week, date) |>    
  summarise(rate = sum(outcome) / sum(population), .groups = 'drop') 

data_2017 <- weekly_counts |>    
  filter(year(date) == 2017)|>    
  group_by(week, date) |>    
  summarise(rate = sum(outcome) / sum(population), .groups = 'drop')  

# Create boxplots for 2002-2016 data, add 2017 data 
ggplot(data_2002_2016, aes(x = week, y = rate, group = week)) +   
  geom_boxplot() +   
  geom_point(data = data_2017, aes(x = week, y = rate, group = week, color = "2017")) +   
  labs(title = "Weekly Mortality Rates: 2002-2016 vs. 2017",        
       x = "MMWR Week",        
       y = "Mortality Rate",        
       color = "Year") +   
  theme_minimal() +   
  theme(axis.text.x = element_text(angle = 90))
```

Note two things: 1) there is a strong week effect and 2) 2017 is lower than expected. Plot the yearly rates (per 1,000) for 2002-2016:

```{r}
weekly_counts |>    
  filter(year(date) < 2017) |>   
  mutate(year = year(date), rate=outcome/population) |>    
  group_by(year) |>    
  summarise(mortality = mean(rate)*1000) |>    
  ggplot(aes(x=year, y=mortality)) +   
  geom_line() +   
  labs(title = "Yearly Mortality Rates: 2002-2016",        
       x = "Year",        
       y = "Mortality Rate (per 1000 people)") +   
  theme_minimal()
```

**Yearly mortality rates have gone down over time. This may be due to the improving quality of healthcare services and infrastructure, as well as access to such services.**

The plot made in 14 explains why 2017 is below what is expected: there appears to be a general decrease in mortality with time. A possible explanation is that medical care is improving and people are living more healthy lives.

**For 2017, there appears to be a few weeks around October when the number of actual deaths is much higher than the number of expected deaths, based on our model.**

17. Finally, plot the observed rates and predicted rates from the model for each `agegroup` and `sex`. Comment on how well the model fits and what you might do differently.

`{r} # Predict expected rate for the entire dataset including 2017 dat2 <- weekly_counts |>    mutate(rate = outcome/population,          day = difftime(date, min(date), units = "day"),          week = as.factor(week))  dat2$expected_rate <- predict(fit, dat2)  # Plot observed and predicted rates by age group and sex ggplot(dat2, aes(x = date)) +   geom_line(aes(y = rate, color = "Observed")) +   geom_line(aes(y = expected_rate, color = "Predicted"), linetype = "dashed") +   facet_wrap(~ agegroup + sex, scales = "free_y") +   labs(title = "Observed and Predicted Mortality Rates by Age Group and Sex",        x = "Week",        y = "Mortality Rate") +   scale_color_manual(values = c("Observed" = "blue", "Predicted" = "red")) +   theme_minimal() +   theme(axis.text.x = element_text(angle = 90))}`

**The model fits somewhat well, but is limited in that we are using linear regression, which may not be well-suited for time series data. A time series model that varies more randomly may be better suited for accurately predicting mortality rate over time.**
